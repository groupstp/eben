# - например
 1. Для переопределения getIntegface(token).
 token - токен пользователя для регистации пользователя в системе(функционал получения токена и регистрации реализован).

 Реализация
  у interfaceInstance необходимо пойти в поле objectView, перебрать все объекты(хранятся все КЛАССЫ сущностей
 (# классы фильтров, ролей, знаков и пользователей) и методы к ним), достать все классы сущностей, которые может видеть
  пользователь с возможными методами этих сущностей.
 Сопоставить (Отобразить)  классы сущностей на объекты interfaceObject.objectView{}
 (#.role.user.methods{}, .role.objects.methods{}, .supply.query.methods{})
 сравнить методы и убрать ненужные из них в объекте getInterface.
 как и куда вставить фильтры в объект getInterface ?

 2. Для переопределения query(object, method, parameter, token).

 object - класс сущности, строка (# role.users, role.objects )
 method - один из методов interfaceInstance, данного класса , строка (# get, insert)
 parameter - объект фильтрации. сложный объект (#
{
 fields: ["ref.users_filters.filterID.ref.filters_fields.fieldID.objectID.description",
     "ref.users_filters.filterID.ref.filters_fields.fieldID.description"],
 filter: {
     comparisons: {
         name: {
             left: {type: "field", value: "ref.users_tokens.token"},
             right: {type: "value", value: tokenValue},
             sign: "equal"
         }
     },
     tree: {and: ["name"]}
 }
})

 token - токен пользователя для регистации пользователя в системе(функционал получения токена и регистрации реализован).


 Реализация
 это просто сравнить с методами, если проходит то сравнить с фильтрами и если проходит то пропустить.
 Дёрнуть выше описанный getInterface, найти в полученном InterfaceInstance КЛАСС СУЩНОСТИ
 запрашиваемого объекта (экземпляра класса),
 Сравнить InterfaceInstance.objectView.[полное имя класса] методы с  запрашиваемым методом у query. Если данного метода
  нет, то не выполнять query и
 вернуть throw без объекта ошибки (со слов Витали почему без объекта ошибки new NotAccessException() ?).
 Если метод есть, то необходимо сравнить филды запрашиваемого объекта().
 С помощью филдов сравнить можно ли выполнять действия над конкретным данным объектом или группой объектов.
 То есть необходимо сначала вернуть группу объектов (экземпляров класса), проверить с помощью фильтра на филды (получить
  его через getInterface или забрать из БД для класса данного класса сущности? считаю, что лучше через getInterface,
  потому что это относится к интерфейсу класса). Если фильтр филдов пропускает, то разрешить дейтсвие, если запрещает,
  то запретить.


 3.переопределение init():
 Реализация
 проверить есть ли в базе роль admin, если есть то проверить есть ли пользователь с ролью админ.
 Если нет пользователя, то создать его и применить к нему роль админ.
 Если нет роли админ, то создать её, создать для роли фильтр, который включает в себя все действия всех классов
 сущностей.
 в конце метода вызвать метод super.init.

